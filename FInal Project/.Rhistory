ggtitle("Count of Clusters by SDGRegion") +
theme(plot.title = element_text(hjust = 0.5))
kmeans_basic_df <- data.frame(Cluster = km$cluster, final_df_cluster)
kmeans_group_df = kmeans_basic_df %>%
group_by(Cluster, region) %>%
summarize(count=n() / nrow(.) )
# head of df
head(kmeans_group_df)
# Example ggplot
#ggplot(data = kmeans_group_df, aes(y = Cluster)) +
#  geom_bar(aes(fill = region)) +
#  ggtitle("Count of Clusters by SDGRegion") +
#  theme(plot.title = element_text(hjust = 0.5))
# Stacked + percent
ggplot(data = kmeans_group_df, aes(fill=region, y=count, x=Cluster)) +
geom_bar(position="fill", stat="identity")+
ggtitle("Count of Clusters by SDGRegion") +
theme(plot.title = element_text(hjust = 0.5))
kmeans_basic_df <- data.frame(Cluster = km$cluster, final_df_cluster)
kmeans_group_df = kmeans_basic_df %>%
group_by(Cluster, region) %>%
summarize(Percentage=n() / nrow(.) )
# head of df
head(kmeans_group_df)
# Example ggplot
#ggplot(data = kmeans_group_df, aes(y = Cluster)) +
#  geom_bar(aes(fill = region)) +
#  ggtitle("Count of Clusters by SDGRegion") +
#  theme(plot.title = element_text(hjust = 0.5))
# Stacked + percent
ggplot(data = kmeans_group_df, aes(fill=region, y=Percentage, x=Cluster)) +
geom_bar(position="fill", stat="identity")+
ggtitle("Frequency % of SDGRegion by Clusters") +
theme(plot.title = element_text(hjust = 0.5))
kmeans_basic_df <- data.frame(Cluster = km$cluster, final_df_cluster)
kmeans_group_df = kmeans_basic_df %>%
group_by(Cluster, region) %>%
summarize(Percentage=n() / nrow(.) )
# head of df
#head(kmeans_group_df)
# Stacked + percent
ggplot(data = kmeans_group_df, aes(fill=region, y=Percentage, x=Cluster)) +
geom_bar(position="fill", stat="identity")+
ggtitle("Frequency % of SDGRegion by Clusters") +
theme(plot.title = element_text(hjust = 0.5))
final_df_cluster <- final_df
final_df_cluster$index <- paste(final_df_cluster$Country.x, final_df_cluster$AD, sep="")
final_df_cluster <- final_df_cluster %>% select(index, Deaths.Air.Pollution.per.100k, gdp.per.capita, SDGRegion, Population.thousands)
final_df_cluster = aggregate(final_df_cluster, by=list(index_=final_df_cluster$index, region=final_df_cluster$SDGRegion), FUN=mean)
final_df_cluster <- subset(final_df_cluster, select = -c(index, SDGRegion))
final_df_cluster <- final_df_cluster[!duplicated(final_df_cluster$index_),]
rownames(final_df_cluster) <- final_df_cluster$index_
head(final_df_cluster)
final_df_numerical <- select_if(final_df_cluster, is.numeric)
#remove rows with missing values
final_df_numerical <- na.omit(final_df_numerical)
#str(final_df_numerical)
data.frame(variable = names(final_df_numerical),
class = sapply(final_df_numerical, typeof),
first_values = sapply(final_df_numerical, function(x) paste0(head(x),  collapse = ", ")),
row.names = NULL) %>%
kable(caption='Figure 6.3-1: Structure of final_df_numerical')
final_df_numerical_scaled <- scale(final_df_numerical)
fviz_nbclust(final_df_numerical_scaled, kmeans, method = "wss")+
geom_vline(xintercept = 3, linetype = 2)+
geom_vline(xintercept = 8, linetype = 2)
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(final_df_numerical_scaled,
FUN = kmeans,
nstart = 25,
K.max = 10,
B = 50)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)+
geom_vline(xintercept = 3, linetype = 2)+
geom_vline(xintercept = 8, linetype = 2)
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
#view results
km$size
km$withinss
xkabledply(km$centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
#view results
km_size = as.data.frame(km$size)
colnames(km_size) <- c("Observations with Each Cluster")
xkabledply(km_size, title="Figure 6.3-5: Number of Observations Within Each Cluster")
#view results
km_withinss= as.data.frame(km$withinss)
colnames(km_withinss) <- c("Total Sum of Squares with Each Cluster")
xkabledply(km_withinss, title="Figure 6.3-6: Total Sum of Squares Within Each Cluster")
#plot results of final k-means model
fviz_cluster(km, data = final_df_numerical_scaled)
kmeans_basic_df <- data.frame(Cluster = km$cluster, final_df_cluster)
kmeans_group_df = kmeans_basic_df %>%
group_by(Cluster, region) %>%
summarize(Percentage=n() / nrow(.) )
# head of df
#head(kmeans_group_df)
# Stacked + percent
ggplot(data = kmeans_group_df, aes(fill=region, y=Percentage, x=Cluster)) +
geom_bar(position="fill", stat="identity")+
ggtitle("Frequency % of SDGRegion by Clusters") +
theme(plot.title = element_text(hjust = 0.5))
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 7, nstart = 25)
#view results
km$size
km$withinss
xkabledply(km$centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
#view results
km_size = as.data.frame(km$size)
colnames(km_size) <- c("Observations with Each Cluster")
xkabledply(km_size, title="Figure 6.3-5: Number of Observations Within Each Cluster")
#view results
km_withinss= as.data.frame(km$withinss)
colnames(km_withinss) <- c("Total Sum of Squares with Each Cluster")
xkabledply(km_withinss, title="Figure 6.3-6: Total Sum of Squares Within Each Cluster")
#plot results of final k-means model
fviz_cluster(km, data = final_df_numerical_scaled)
kmeans_basic_df <- data.frame(Cluster = km$cluster, final_df_cluster)
kmeans_group_df = kmeans_basic_df %>%
group_by(Cluster, region) %>%
summarize(Percentage=n() / nrow(.) )
# head of df
#head(kmeans_group_df)
# Stacked + percent
ggplot(data = kmeans_group_df, aes(fill=region, y=Percentage, x=Cluster)) +
geom_bar(position="fill", stat="identity")+
ggtitle("Frequency % of SDGRegion by Clusters") +
theme(plot.title = element_text(hjust = 0.5))
final_df_numerical_scaled <- scale(final_df_numerical)
fviz_nbclust(final_df_numerical_scaled, kmeans, method = "wss")+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 7, linetype = 2)
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(final_df_numerical_scaled,
FUN = kmeans,
nstart = 25,
K.max = 10,
B = 50)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)+
geom_vline(xintercept = 5, linetype = 2)+
geom_vline(xintercept = 7, linetype = 2)
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(final_df_numerical_scaled,
FUN = kmeans,
nstart = 25,
K.max = 10,
B = 50)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 7, linetype = 2)
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
#view results
km$size
km$withinss
xkabledply(km$centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
#view results
km_size = as.data.frame(km$size)
colnames(km_size) <- c("Observations with Each Cluster")
xkabledply(km_size, title="Figure 6.3-5: Number of Observations Within Each Cluster")
#view results
km_withinss= as.data.frame(km$withinss)
colnames(km_withinss) <- c("Total Sum of Squares with Each Cluster")
xkabledply(km_withinss, title="Figure 6.3-6: Total Sum of Squares Within Each Cluster")
#plot results of final k-means model
fviz_cluster(km, data = final_df_numerical_scaled)
kmeans_basic_df <- data.frame(Cluster = km$cluster, final_df_cluster)
kmeans_group_df = kmeans_basic_df %>%
group_by(Cluster, region) %>%
summarize(Percentage=n() / nrow(.) )
# head of df
#head(kmeans_group_df)
# Stacked + percent
ggplot(data = kmeans_group_df, aes(fill=region, y=Percentage, x=Cluster)) +
geom_bar(position="fill", stat="identity")+
ggtitle("Frequency % of SDGRegion by Clusters") +
theme(plot.title = element_text(hjust = 0.5))
final_df_cluster <- final_df
final_df_cluster$index <- paste(final_df_cluster$Country.x, final_df_cluster$AD, sep="")
final_df_cluster <- final_df_cluster %>% select(index, Deaths.Air.Pollution.per.100k, gdp.per.capita, SubRegion, Population.thousands)
final_df_cluster = aggregate(final_df_cluster, by=list(index_=final_df_cluster$index, region=final_df_cluster$SubRegion), FUN=mean)
final_df_cluster <- subset(final_df_cluster, select = -c(index, SubRegion))
final_df_cluster <- final_df_cluster[!duplicated(final_df_cluster$index_),]
rownames(final_df_cluster) <- final_df_cluster$index_
head(final_df_cluster)
final_df_numerical <- select_if(final_df_cluster, is.numeric)
#remove rows with missing values
final_df_numerical <- na.omit(final_df_numerical)
#str(final_df_numerical)
data.frame(variable = names(final_df_numerical),
class = sapply(final_df_numerical, typeof),
first_values = sapply(final_df_numerical, function(x) paste0(head(x),  collapse = ", ")),
row.names = NULL) %>%
kable(caption='Figure 6.3-1: Structure of final_df_numerical')
final_df_numerical_scaled <- scale(final_df_numerical)
fviz_nbclust(final_df_numerical_scaled, kmeans, method = "wss")+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 7, linetype = 2)
final_df_numerical_scaled <- scale(final_df_numerical)
fviz_nbclust(final_df_numerical_scaled, kmeans, method = "wss")+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 9, linetype = 2)
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(final_df_numerical_scaled,
FUN = kmeans,
nstart = 25,
K.max = 10,
B = 50)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 7, linetype = 2)
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(final_df_numerical_scaled,
FUN = kmeans,
nstart = 25,
K.max = 10,
B = 50)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 9, linetype = 2)
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
#view results
km$size
km$withinss
xkabledply(km$centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
#view results
km_size = as.data.frame(km$size)
colnames(km_size) <- c("Observations with Each Cluster")
xkabledply(km_size, title="Figure 6.3-5: Number of Observations Within Each Cluster")
#view results
km_withinss= as.data.frame(km$withinss)
colnames(km_withinss) <- c("Total Sum of Squares with Each Cluster")
xkabledply(km_withinss, title="Figure 6.3-6: Total Sum of Squares Within Each Cluster")
#plot results of final k-means model
fviz_cluster(km, data = final_df_numerical_scaled)
kmeans_basic_df <- data.frame(Cluster = km$cluster, final_df_cluster)
kmeans_group_df = kmeans_basic_df %>%
group_by(Cluster, region) %>%
summarize(Percentage=n() / nrow(.) )
# head of df
#head(kmeans_group_df)
# Stacked + percent
ggplot(data = kmeans_group_df, aes(fill=region, y=Percentage, x=Cluster)) +
geom_bar(position="fill", stat="identity")+
ggtitle("Frequency % of SDGRegion by Clusters") +
theme(plot.title = element_text(hjust = 0.5))
final_df_cluster <- final_df
final_df_cluster$index <- paste(final_df_cluster$Country.x, final_df_cluster$AD, sep="")
final_df_cluster <- final_df_cluster %>% select(index, Deaths.Air.Pollution.per.100k, gdp.per.capita, SDGRegion, Population.thousands)
final_df_cluster = aggregate(final_df_cluster, by=list(index_=final_df_cluster$index, region=final_df_cluster$SDGRegion), FUN=mean)
final_df_cluster <- subset(final_df_cluster, select = -c(index, SDGRegion))
final_df_cluster <- final_df_cluster[!duplicated(final_df_cluster$index_),]
rownames(final_df_cluster) <- final_df_cluster$index_
head(final_df_cluster)
final_df_numerical <- select_if(final_df_cluster, is.numeric)
#remove rows with missing values
final_df_numerical <- na.omit(final_df_numerical)
#str(final_df_numerical)
data.frame(variable = names(final_df_numerical),
class = sapply(final_df_numerical, typeof),
first_values = sapply(final_df_numerical, function(x) paste0(head(x),  collapse = ", ")),
row.names = NULL) %>%
kable(caption='Figure 6.3-1: Structure of final_df_numerical')
final_df_numerical_scaled <- scale(final_df_numerical)
fviz_nbclust(final_df_numerical_scaled, kmeans, method = "wss")+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 9, linetype = 2)
final_df_numerical_scaled <- scale(final_df_numerical)
fviz_nbclust(final_df_numerical_scaled, kmeans, method = "wss")+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 7, linetype = 2)
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(final_df_numerical_scaled,
FUN = kmeans,
nstart = 25,
K.max = 10,
B = 50)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)+
geom_vline(xintercept = 4, linetype = 2)+
geom_vline(xintercept = 7, linetype = 2)
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
#view results
km$size
km$withinss
xkabledply(km$centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
#view results
km_size = as.data.frame(km$size)
colnames(km_size) <- c("Observations with Each Cluster")
xkabledply(km_size, title="Figure 6.3-5: Number of Observations Within Each Cluster")
#view results
km_withinss= as.data.frame(km$withinss)
colnames(km_withinss) <- c("Total Sum of Squares with Each Cluster")
xkabledply(km_withinss, title="Figure 6.3-6: Total Sum of Squares Within Each Cluster")
#plot results of final k-means model
fviz_cluster(km, data = final_df_numerical_scaled)
kmeans_basic_df <- data.frame(Cluster = km$cluster, final_df_cluster)
kmeans_group_df = kmeans_basic_df %>%
group_by(Cluster, region) %>%
summarize(Percentage=n() / nrow(.) )
# head of df
#head(kmeans_group_df)
# Stacked + percent
ggplot(data = kmeans_group_df, aes(fill=region, y=Percentage, x=Cluster)) +
geom_bar(position="fill", stat="identity")+
ggtitle("Frequency % of SDGRegion by Clusters") +
theme(plot.title = element_text(hjust = 0.5))
final_df_cluster <- final_df
final_df_cluster$index <- paste(final_df_cluster$Country.x, final_df_cluster$AD, sep="")
final_df_cluster <- final_df_cluster %>% select(index, Deaths.Air.Pollution.per.100k, gdp.per.capita, SDGRegion, Population.thousands)
final_df_cluster = aggregate(final_df_cluster, by=list(index_=final_df_cluster$index, region=final_df_cluster$SDGRegion), FUN=mean)
final_df_cluster <- subset(final_df_cluster, select = -c(index, SDGRegion))
final_df_cluster <- final_df_cluster[!duplicated(final_df_cluster$index_),]
rownames(final_df_cluster) <- final_df_cluster$index_
#head(final_df_cluster)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
#Make sure you install the below packages by removing the comment - #
# install.packages("Rcpp")
# install.packages("tidyverse")
# install.packages("rworldmap")
# install.packages("tmap")
# install.packages("spData")
# install.packages("sf")
# install.packages("ggpubr")
library(ezids)
library(tidyverse) #install.packages("tidyverse")
library(rworldmap) #install.packages("rworldmap")
library(tmap) #install.packages("tmap")
library(sp) #install.packages("spData")
library(spData)
library(sf) #install.packages("sf")
library(ggpubr) #install.packages("ggpubr")
library(dplyr) #install.packages("dplyr")
library(knitr)
library(magrittr)
library(factoextra) #install.packages("factoextra")
library(cluster)
loadPkg("faraway")
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = FALSE, results = "show", message = F)
options(scientific=T, digits = 3)
options(scipen=999)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
final_df_cluster <- final_df
final_df_cluster$index <- paste(final_df_cluster$Country.x, final_df_cluster$AD, sep="")
final_df_cluster <- final_df_cluster %>% select(index, Deaths.Air.Pollution.per.100k, gdp.per.capita, SDGRegion, Population.thousands)
final_df_cluster = aggregate(final_df_cluster, by=list(index_=final_df_cluster$index, region=final_df_cluster$SDGRegion), FUN=mean)
final_df_cluster <- subset(final_df_cluster, select = -c(index, SDGRegion))
final_df_cluster <- final_df_cluster[!duplicated(final_df_cluster$index_),]
rownames(final_df_cluster) <- final_df_cluster$index_
#head(final_df_cluster)
final_df_cluster <- final_df
final_df_cluster$index <- paste(final_df_cluster$Country.x, final_df_cluster$AD, sep="")
final_df_cluster <- final_df_cluster %>% select(index, Deaths.Air.Pollution.per.100k, gdp.per.capita, SDGRegion, Population.thousands)
final_df_cluster = aggregate(final_df_cluster, by=list(index_=final_df_cluster$index, region=final_df_cluster$SDGRegion), FUN=mean)
final_df_cluster <- subset(final_df_cluster, select = -c(index, SDGRegion))
final_df_cluster <- final_df_cluster[!duplicated(final_df_cluster$index_),]
rownames(final_df_cluster) <- final_df_cluster$index_
#head(final_df_cluster)
final_df_cluster <- final_df
final_df_cluster$index <- paste(final_df_cluster$Country.x, final_df_cluster$AD, sep="")
final_df_cluster <- final_df_cluster %>% select(index, Deaths.Air.Pollution.per.100k, gdp.per.capita, SDGRegion, Population.thousands)
final_df_cluster = aggregate(final_df_cluster, by=list(index_=final_df_cluster$index, region=final_df_cluster$SDGRegion), FUN=mean)
final_df_cluster <- subset(final_df_cluster, select = -c(index, SDGRegion))
final_df_cluster <- final_df_cluster[!duplicated(final_df_cluster$index_),]
rownames(final_df_cluster) <- final_df_cluster$index_
print('.')
#head(final_df_cluster)
final_df_cluster <- final_df
final_df_cluster$index <- paste(final_df_cluster$Country.x, final_df_cluster$AD, sep="")
final_df_cluster <- final_df_cluster %>% select(index, Deaths.Air.Pollution.per.100k, gdp.per.capita, SDGRegion, Population.thousands)
final_df_cluster = aggregate(final_df_cluster, by=list(index_=final_df_cluster$index, region=final_df_cluster$SDGRegion), FUN=mean)
final_df_cluster <- subset(final_df_cluster, select = -c(index, SDGRegion))
final_df_cluster <- final_df_cluster[!duplicated(final_df_cluster$index_),]
rownames(final_df_cluster) <- final_df_cluster$index_
head(final_df_cluster)
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
xkabledply(km$centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
g1 = ggplot() + geom_sf(data = final_df_sf, aes(fill = Deaths.Air.Pollution.per.100k), color = 'black') + scale_fill_distiller(palette = "YlGnBu") + coord_sf(crs = st_crs(4283)) + labs(title = "Effect of Deaths due to Air Pollution per 100k by Countries",
caption = "Data Source: Kaggle")
g1
g2 = ggplot() + geom_sf(data = final_df_sf, aes(fill = gdp.per.capita), color = 'black') + scale_fill_distiller(palette = "YlGnBu") + coord_sf(crs = st_crs(4283)) + labs(title = "GDP per Capita by Countries",
caption = "Data Source: United Nations")
g2
g5 = ggplot() + geom_sf(data = final_df_sf[final_df_sf, ], aes(fill = Deaths.Air.Pollution.per.100k), color = 'black') + scale_fill_distiller(palette = "YlGnBu") + coord_sf(crs = st_crs(4283)) + labs(title = "Population (thousands) by Countries", subtitle = "Sub-Saharan Africa",
caption = "Data Source: United Nations")
g5
g5 = ggplot() + geom_sf(data = final_df_sf[final_df_sf$SDGRegion == 'SUB-SAHARANAFRICA' & final_df_sf$Year == 2017, ], aes(fill = Deaths.Air.Pollution.per.100k), color = 'black') + scale_fill_distiller(palette = "YlGnBu") + coord_sf(crs = st_crs(4283)) + labs(title = "Population (thousands) by Countries", subtitle = "Sub-Saharan Africa",
caption = "Data Source: United Nations")
g5
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km$cluster
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km$centers
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km$centers
km$centers$clusters <- c(1, 2, 3, 4)
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km_centers = km$centers
km_centers$clusters <- c(1, 2, 3, 4)
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km_centers = km$centers
km_centers$clusters <- c(1, 2, 3, 4)
km_centers
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km_centers = km$centers
clusters = c(1, 2, 3, 4)
km_centers$clusters = clusters
km_centers
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km_centers = km$centers
#clusters = c(1, 2, 3, 4)
#km_centers$clusters = clusters
km_centers
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km_centers = km$centers
km_centers <- cbind(Cluster = rownames(km_centers), km_centers)
rownames(km_centers) <- 1:nrow(km_centers)
#clusters = c(1, 2, 3, 4)
#km_centers$clusters = clusters
km_centers
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km_centers = km$centers
km_centers <- cbind(Cluster = rownames(km_centers), km_centers)
rownames(km_centers) <- 1:nrow(km_centers)
km_centers
xkabledply(km$centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km_centers = km$centers
km_centers <- cbind(Cluster = rownames(km_centers), km_centers)
rownames(km_centers) <- 1:nrow(km_centers)
km_centers
xkabledply(km_centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
#make this example reproducible
set.seed(42)
#perform k-means clustering with k = 4 clusters
km <- kmeans(final_df_numerical_scaled, centers = 4, nstart = 25)
km_centers = km$centers
km_centers <- cbind(Cluster = rownames(km_centers), km_centers)
rownames(km_centers) <- 1:nrow(km_centers)
xkabledply(km_centers, title="Figure 6.3-4: K-Means Clustering Average Values per Cluster")
#view results
km_size = as.data.frame(km$size)
colnames(km_size) <- c("Observations with Each Cluster")
km_size <- cbind(Cluster = rownames(km_size), km_size)
rownames(km_size) <- 1:nrow(km_size)
xkabledply(km_size, title="Figure 6.3-5: Number of Observations Within Each Cluster")
#view results
km_withinss= as.data.frame(km$withinss)
colnames(km_withinss) <- c("Total Sum of Squares with Each Cluster")
km_withinss <- cbind(Cluster = rownames(km_withinss), km_withinss)
rownames(km_withinss) <- 1:nrow(km_withinss)
xkabledply(km_withinss, title="Figure 6.3-6: Total Sum of Squares Within Each Cluster")
